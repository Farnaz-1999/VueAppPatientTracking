import Map from "./components/Map.vue";
import { olx } from 'openlayers';
declare type MapProps = InstanceType<typeof Map>["$props"];
declare type Arguments = MapProps & olx.MapOptions;
export default function (options: Arguments): {
    app: import("vue").App<Element>;
    Map: {
        new (...args: any[]): {
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                zoom: number;
                scale: number;
                cluster: boolean;
                clusterThreshold: number;
                zoomOnMarkerClick: boolean;
                zoomOnResultClick: boolean;
                popupOnMarkerHover: boolean;
                popupOnResultHover: boolean;
                reverseOnClick: boolean;
                serviceKey: string;
                center: import("./components/Map.model").CoordsObj;
                poi: boolean;
                traffic: boolean;
                defaultType: import("./store/map/map.model").MapType;
                mapTypes: import("./store/map/map.model").MapType[];
                hideLayers: boolean;
                hideSearchContainer: boolean;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                mapKey: {
                    type: StringConstructor;
                    required: true;
                };
                serviceKey: {
                    type: StringConstructor;
                    default: string;
                };
                reverseUrl: StringConstructor;
                searchUrl: StringConstructor;
                center: {
                    type: import("vue").PropType<import("./components/Map.model").CoordsObj>;
                    default: null;
                };
                zoom: {
                    type: NumberConstructor;
                    default: number;
                };
                poi: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                traffic: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                defaultType: {
                    type: import("vue").PropType<import("./store/map/map.model").MapType>;
                    default: string;
                };
                mapTypes: {
                    type: import("vue").PropType<import("./store/map/map.model").MapType[]>;
                    default: import("./store/map/map.model").MapType[];
                };
                desktopLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                mobileLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                desktopLayersStyle: ObjectConstructor;
                mobileLayersStyle: ObjectConstructor;
                temporaryPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                persistentPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                temporaryPopupContainerStyle: ObjectConstructor;
                persistentPopupContainerStyle: ObjectConstructor;
                hideLayers: BooleanConstructor;
                hideSearchContainer: BooleanConstructor;
                markersIconCallback: import("vue").PropType<import("./components/Map.model").MarkersIconCallback>;
                markerHoverCallback: import("vue").PropType<import("./components/Map.model").MarkerHoverCallback>;
                popupOnMarkerHover: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                popupOnResultHover: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                zoomOnMarkerClick: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                zoomOnResultClick: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                cluster: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                clusterThreshold: {
                    type: NumberConstructor;
                    default: number;
                };
                reverseOnClick: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                scale: {
                    type: NumberConstructor;
                    default: number;
                };
                viewType: import("vue").PropType<import("./store/map/map.model").ViewType>;
            }>> & {
                "onOn-click"?: ((...args: any[]) => any) | undefined;
                "onOn-zoom"?: ((...args: any[]) => any) | undefined;
                "onOn-result-hover"?: ((...args: any[]) => any) | undefined;
                "onOn-result-click"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "zoom" | "scale" | "cluster" | "clusterThreshold" | "zoomOnMarkerClick" | "zoomOnResultClick" | "popupOnMarkerHover" | "popupOnResultHover" | "reverseOnClick" | "serviceKey" | "center" | "poi" | "traffic" | "defaultType" | "mapTypes" | "hideLayers" | "hideSearchContainer">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
            $emit: (event: "on-click" | "on-zoom" | "on-result-hover" | "on-result-click", ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                mapKey: {
                    type: StringConstructor;
                    required: true;
                };
                serviceKey: {
                    type: StringConstructor;
                    default: string;
                };
                reverseUrl: StringConstructor;
                searchUrl: StringConstructor;
                center: {
                    type: import("vue").PropType<import("./components/Map.model").CoordsObj>;
                    default: null;
                };
                zoom: {
                    type: NumberConstructor;
                    default: number;
                };
                poi: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                traffic: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                defaultType: {
                    type: import("vue").PropType<import("./store/map/map.model").MapType>;
                    default: string;
                };
                mapTypes: {
                    type: import("vue").PropType<import("./store/map/map.model").MapType[]>;
                    default: import("./store/map/map.model").MapType[];
                };
                desktopLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                mobileLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                desktopLayersStyle: ObjectConstructor;
                mobileLayersStyle: ObjectConstructor;
                temporaryPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                persistentPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
                temporaryPopupContainerStyle: ObjectConstructor;
                persistentPopupContainerStyle: ObjectConstructor;
                hideLayers: BooleanConstructor;
                hideSearchContainer: BooleanConstructor;
                markersIconCallback: import("vue").PropType<import("./components/Map.model").MarkersIconCallback>;
                markerHoverCallback: import("vue").PropType<import("./components/Map.model").MarkerHoverCallback>;
                popupOnMarkerHover: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                popupOnResultHover: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                zoomOnMarkerClick: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                zoomOnResultClick: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                cluster: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                clusterThreshold: {
                    type: NumberConstructor;
                    default: number;
                };
                reverseOnClick: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                scale: {
                    type: NumberConstructor;
                    default: number;
                };
                viewType: import("vue").PropType<import("./store/map/map.model").ViewType>;
            }>> & {
                "onOn-click"?: ((...args: any[]) => any) | undefined;
                "onOn-zoom"?: ((...args: any[]) => any) | undefined;
                "onOn-result-hover"?: ((...args: any[]) => any) | undefined;
                "onOn-result-click"?: ((...args: any[]) => any) | undefined;
            }, {
                state: {
                    api: {
                        REVERSE: (lng: number, lat: number) => Promise<import("./store/markers/markers.model").PrimaryReverseResult>;
                        SEARCH: (term: string, coords: import("openlayers").Coordinate) => Promise<import("./store/markers/markers.model").SearchResult>;
                    } | null;
                    searchLoading: boolean;
                    reverseLoading: boolean;
                    mapContainer: HTMLDivElement | null;
                    map: {
                        setMapType: (value: import("./store/map/map.model").MapType) => void;
                        switchPoiLayer: (value: boolean) => void;
                        switchTrafficLayer: (value: boolean) => void;
                        addControl: (control: import("openlayers").control.Control) => void;
                        addInteraction: (interaction: import("openlayers").interaction.Interaction) => void;
                        addLayer: (layer: import("openlayers").layer.Base) => void;
                        addOverlay: (overlay: import("openlayers").Overlay) => void;
                        forEachFeatureAtPixel: <T>(pixel: import("openlayers").Pixel, callback: (feature: import("openlayers").Feature | import("openlayers").render.Feature, layer: import("openlayers").layer.Layer) => T, opt_options?: olx.AtPixelOptions | undefined) => T;
                        getFeaturesAtPixel: (pixel: import("openlayers").Pixel, opt_options?: olx.AtPixelOptions | undefined) => (import("openlayers").Feature | import("openlayers").render.Feature)[] | null;
                        forEachLayerAtPixel: <T_1>(pixel: import("openlayers").Pixel, callback: (layer: import("openlayers").layer.Layer, color: import("openlayers").Color) => T_1, opt_this?: any, opt_layerFilter?: ((layer: import("openlayers").layer.Layer) => boolean) | undefined, opt_this2?: any) => T_1;
                        hasFeatureAtPixel: (pixel: import("openlayers").Pixel, opt_options?: olx.AtPixelOptions | undefined) => boolean;
                        getEventCoordinate: (event: Event) => import("openlayers").Coordinate;
                        getEventPixel: (event: Event) => import("openlayers").Pixel;
                        getTarget: () => string | Element;
                        getTargetElement: () => Element;
                        getCoordinateFromPixel: (pixel: import("openlayers").Pixel) => import("openlayers").Coordinate;
                        getControls: () => import("openlayers").Collection<import("openlayers").control.Control>;
                        getOverlays: () => import("openlayers").Collection<import("openlayers").Overlay>;
                        getOverlayById: (id: string | number) => import("openlayers").Overlay;
                        getInteractions: () => import("openlayers").Collection<import("openlayers").interaction.Interaction>;
                        getLayerGroup: () => import("openlayers").layer.Group;
                        getLayers: () => import("openlayers").Collection<import("openlayers").layer.Base>;
                        getPixelFromCoordinate: (coordinate: import("openlayers").Coordinate) => import("openlayers").Pixel;
                        getSize: () => import("openlayers").Size;
                        getView: () => import("openlayers").View;
                        getViewport: () => Element;
                        renderSync: () => void;
                        render: () => void;
                        removeControl: (control: import("openlayers").control.Control) => import("openlayers").control.Control;
                        removeInteraction: (interaction: import("openlayers").interaction.Interaction) => import("openlayers").interaction.Interaction;
                        removeLayer: (layer: import("openlayers").layer.Base) => import("openlayers").layer.Base;
                        removeOverlay: (overlay: import("openlayers").Overlay) => import("openlayers").Overlay;
                        setLayerGroup: (layerGroup: import("openlayers").layer.Group) => void;
                        setSize: (size: import("openlayers").Size) => void;
                        setTarget: (target: string | Element) => void;
                        setView: (view: import("openlayers").View) => void;
                        updateSize: () => void;
                        get: (key: string) => any;
                        getKeys: () => string[];
                        getProperties: () => {
                            [k: string]: any;
                        };
                        set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                        setProperties: (values: {
                            [k: string]: any;
                        }, opt_silent?: boolean | undefined) => void;
                        unset: (key: string, opt_silent?: boolean | undefined) => void;
                        changed: () => void;
                        dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                        getRevision: () => number;
                        on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                    } | null;
                    mapType: import("./store/map/map.model").MapType;
                    zoom: number;
                    poiLayer: boolean;
                    trafficLayer: boolean;
                    viewType: import("./store/map/map.model").ViewType;
                    scale: number;
                    drawerActivation: boolean;
                    drawerShowDetails: boolean;
                    mobileDrawerShowDetails: boolean;
                    overlay: {
                        getElement: () => Element;
                        getId: () => string | number;
                        getMap: () => import("openlayers").Map;
                        getOffset: () => number[];
                        getPosition: () => import("openlayers").Coordinate;
                        getPositioning: () => import("openlayers").OverlayPositioning;
                        setElement: (element: Element) => void;
                        setMap: (map: import("openlayers").Map) => void;
                        setOffset: (offset: number[]) => void;
                        setPosition: (position: import("openlayers").Coordinate | undefined) => void;
                        setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
                        get: (key: string) => any;
                        getKeys: () => string[];
                        getProperties: () => {
                            [k: string]: any;
                        };
                        set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                        setProperties: (values: {
                            [k: string]: any;
                        }, opt_silent?: boolean | undefined) => void;
                        unset: (key: string, opt_silent?: boolean | undefined) => void;
                        changed: () => void;
                        dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                        getRevision: () => number;
                        on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                    } | null;
                    persistentOverlay: {
                        getElement: () => Element;
                        getId: () => string | number;
                        getMap: () => import("openlayers").Map;
                        getOffset: () => number[];
                        getPosition: () => import("openlayers").Coordinate;
                        getPositioning: () => import("openlayers").OverlayPositioning;
                        setElement: (element: Element) => void;
                        setMap: (map: import("openlayers").Map) => void;
                        setOffset: (offset: number[]) => void;
                        setPosition: (position: import("openlayers").Coordinate | undefined) => void;
                        setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
                        get: (key: string) => any;
                        getKeys: () => string[];
                        getProperties: () => {
                            [k: string]: any;
                        };
                        set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                        setProperties: (values: {
                            [k: string]: any;
                        }, opt_silent?: boolean | undefined) => void;
                        unset: (key: string, opt_silent?: boolean | undefined) => void;
                        changed: () => void;
                        dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                        getRevision: () => number;
                        on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                    } | null;
                    popupContainer: HTMLDivElement | null;
                    persistentContainer: HTMLDivElement | null;
                    selectedMarker: {
                        mapCoords: [number, number];
                        iconUrl: string;
                        category: string;
                        location: {
                            x: number;
                            y: number;
                        };
                        neighbourhood: string;
                        region: string;
                        title: string;
                        type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
                        address: string;
                    } | {
                        mapCoords: [number, number];
                        city: import("./components/Map.model").NuString;
                        district: import("./components/Map.model").NuString;
                        formatted_address: import("./components/Map.model").NuString;
                        in_odd_even_zone: boolean;
                        in_traffic_zone: boolean;
                        municipality_zone: import("./components/Map.model").NuString;
                        neighbourhood: import("./components/Map.model").NuString;
                        place: import("./components/Map.model").NuString;
                        route_name: import("./components/Map.model").NuString;
                        route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
                        state: import("./components/Map.model").NuString;
                        status: import("./components/Map.model").NuString;
                        village: import("./components/Map.model").NuString;
                    } | null;
                    mainMarker: {
                        getSource: () => import("openlayers").source.Vector;
                        getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
                        getStyleFunction: () => import("openlayers").StyleFunction | undefined;
                        setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
                        setMap: (map: import("openlayers").Map) => void;
                        setSource: (source: import("openlayers").source.Source) => void;
                        getExtent: () => import("openlayers").Extent;
                        getMaxResolution: () => number;
                        getMinResolution: () => number;
                        getOpacity: () => number;
                        getVisible: () => boolean;
                        getZIndex: () => number;
                        setExtent: (extent: import("openlayers").Extent) => void;
                        setMaxResolution: (maxResolution: number) => void;
                        setMinResolution: (minResolution: number) => void;
                        setOpacity: (opacity: number) => void;
                        setVisible: (visible: boolean) => void;
                        setZIndex: (zindex: number) => void;
                        get: (key: string) => any;
                        getKeys: () => string[];
                        getProperties: () => {
                            [k: string]: any;
                        };
                        set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                        setProperties: (values: {
                            [k: string]: any;
                        }, opt_silent?: boolean | undefined) => void;
                        unset: (key: string, opt_silent?: boolean | undefined) => void;
                        changed: () => void;
                        dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                        getRevision: () => number;
                        on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                    } | null;
                    mainMarkerCoords: [number, number] | null;
                    reverseResult: {
                        mapCoords: [number, number];
                        city: import("./components/Map.model").NuString;
                        district: import("./components/Map.model").NuString;
                        formatted_address: import("./components/Map.model").NuString;
                        in_odd_even_zone: boolean;
                        in_traffic_zone: boolean;
                        municipality_zone: import("./components/Map.model").NuString;
                        neighbourhood: import("./components/Map.model").NuString;
                        place: import("./components/Map.model").NuString;
                        route_name: import("./components/Map.model").NuString;
                        route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
                        state: import("./components/Map.model").NuString;
                        status: import("./components/Map.model").NuString;
                        village: import("./components/Map.model").NuString;
                    } | null;
                    searchMarkers: {
                        getSource: () => import("openlayers").source.Vector;
                        getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
                        getStyleFunction: () => import("openlayers").StyleFunction | undefined;
                        setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
                        setMap: (map: import("openlayers").Map) => void;
                        setSource: (source: import("openlayers").source.Source) => void;
                        getExtent: () => import("openlayers").Extent;
                        getMaxResolution: () => number;
                        getMinResolution: () => number;
                        getOpacity: () => number;
                        getVisible: () => boolean;
                        getZIndex: () => number;
                        setExtent: (extent: import("openlayers").Extent) => void;
                        setMaxResolution: (maxResolution: number) => void;
                        setMinResolution: (minResolution: number) => void;
                        setOpacity: (opacity: number) => void;
                        setVisible: (visible: boolean) => void;
                        setZIndex: (zindex: number) => void;
                        get: (key: string) => any;
                        getKeys: () => string[];
                        getProperties: () => {
                            [k: string]: any;
                        };
                        set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                        setProperties: (values: {
                            [k: string]: any;
                        }, opt_silent?: boolean | undefined) => void;
                        unset: (key: string, opt_silent?: boolean | undefined) => void;
                        changed: () => void;
                        dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                        getRevision: () => number;
                        on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                        un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                    } | null;
                    searchResults: {
                        mapCoords: [number, number];
                        iconUrl: string;
                        category: string;
                        location: {
                            x: number;
                            y: number;
                        };
                        neighbourhood: string;
                        region: string;
                        title: string;
                        type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
                        address: string;
                    }[];
                    breakpoints: {
                        lt: {
                            xs: boolean;
                            sm: boolean;
                            md: boolean;
                            lg: boolean;
                            xl: boolean;
                        };
                        gt: {
                            xs: boolean;
                            sm: boolean;
                            md: boolean;
                            lg: boolean;
                            xl: boolean;
                        };
                        xs: boolean;
                        sm: boolean;
                        md: boolean;
                        lg: boolean;
                        xl: boolean;
                    };
                    mapDimensions: {
                        width: string;
                        height: string;
                    };
                };
                search: ({ term, coords }: import("./components/Map.model").HandleSearchProps) => Promise<{
                    markers: import("openlayers").layer.Vector;
                    data: import("./store/markers/markers.model").SearchResult;
                } | undefined>;
                reverse: (args_0: import("openlayers").Coordinate, args_1?: import("./store/markers/markers.model").ReverseOnPointOptions | undefined) => Promise<{
                    marker: import("openlayers").layer.Vector | undefined;
                    coords: import("openlayers").Coordinate;
                    data: import("./store/markers/markers.model").PrimaryReverseResult;
                } | {
                    marker?: undefined;
                    coords?: undefined;
                    data?: undefined;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("on-click" | "on-zoom" | "on-result-hover" | "on-result-click")[], string, {
                zoom: number;
                scale: number;
                cluster: boolean;
                clusterThreshold: number;
                zoomOnMarkerClick: boolean;
                zoomOnResultClick: boolean;
                popupOnMarkerHover: boolean;
                popupOnResultHover: boolean;
                reverseOnClick: boolean;
                serviceKey: string;
                center: import("./components/Map.model").CoordsObj;
                poi: boolean;
                traffic: boolean;
                defaultType: import("./store/map/map.model").MapType;
                mapTypes: import("./store/map/map.model").MapType[];
                hideLayers: boolean;
                hideSearchContainer: boolean;
            }, {}, string> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch<T_2 extends string | ((...args: any) => any)>(source: T_2, cb: T_2 extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            mapKey: {
                type: StringConstructor;
                required: true;
            };
            serviceKey: {
                type: StringConstructor;
                default: string;
            };
            reverseUrl: StringConstructor;
            searchUrl: StringConstructor;
            center: {
                type: import("vue").PropType<import("./components/Map.model").CoordsObj>;
                default: null;
            };
            zoom: {
                type: NumberConstructor;
                default: number;
            };
            poi: {
                type: BooleanConstructor;
                default: boolean;
            };
            traffic: {
                type: BooleanConstructor;
                default: boolean;
            };
            defaultType: {
                type: import("vue").PropType<import("./store/map/map.model").MapType>;
                default: string;
            };
            mapTypes: {
                type: import("vue").PropType<import("./store/map/map.model").MapType[]>;
                default: import("./store/map/map.model").MapType[];
            };
            desktopLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
            mobileLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
            desktopLayersStyle: ObjectConstructor;
            mobileLayersStyle: ObjectConstructor;
            temporaryPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
            persistentPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
            temporaryPopupContainerStyle: ObjectConstructor;
            persistentPopupContainerStyle: ObjectConstructor;
            hideLayers: BooleanConstructor;
            hideSearchContainer: BooleanConstructor;
            markersIconCallback: import("vue").PropType<import("./components/Map.model").MarkersIconCallback>;
            markerHoverCallback: import("vue").PropType<import("./components/Map.model").MarkerHoverCallback>;
            popupOnMarkerHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            popupOnResultHover: {
                type: BooleanConstructor;
                default: boolean;
            };
            zoomOnMarkerClick: {
                type: BooleanConstructor;
                default: boolean;
            };
            zoomOnResultClick: {
                type: BooleanConstructor;
                default: boolean;
            };
            cluster: {
                type: BooleanConstructor;
                default: boolean;
            };
            clusterThreshold: {
                type: NumberConstructor;
                default: number;
            };
            reverseOnClick: {
                type: BooleanConstructor;
                default: boolean;
            };
            scale: {
                type: NumberConstructor;
                default: number;
            };
            viewType: import("vue").PropType<import("./store/map/map.model").ViewType>;
        }>> & {
            "onOn-click"?: ((...args: any[]) => any) | undefined;
            "onOn-zoom"?: ((...args: any[]) => any) | undefined;
            "onOn-result-hover"?: ((...args: any[]) => any) | undefined;
            "onOn-result-click"?: ((...args: any[]) => any) | undefined;
        } & import("vue").ShallowUnwrapRef<{
            state: {
                api: {
                    REVERSE: (lng: number, lat: number) => Promise<import("./store/markers/markers.model").PrimaryReverseResult>;
                    SEARCH: (term: string, coords: import("openlayers").Coordinate) => Promise<import("./store/markers/markers.model").SearchResult>;
                } | null;
                searchLoading: boolean;
                reverseLoading: boolean;
                mapContainer: HTMLDivElement | null;
                map: {
                    setMapType: (value: import("./store/map/map.model").MapType) => void;
                    switchPoiLayer: (value: boolean) => void;
                    switchTrafficLayer: (value: boolean) => void;
                    addControl: (control: import("openlayers").control.Control) => void;
                    addInteraction: (interaction: import("openlayers").interaction.Interaction) => void;
                    addLayer: (layer: import("openlayers").layer.Base) => void;
                    addOverlay: (overlay: import("openlayers").Overlay) => void;
                    forEachFeatureAtPixel: <T>(pixel: import("openlayers").Pixel, callback: (feature: import("openlayers").Feature | import("openlayers").render.Feature, layer: import("openlayers").layer.Layer) => T, opt_options?: olx.AtPixelOptions | undefined) => T;
                    getFeaturesAtPixel: (pixel: import("openlayers").Pixel, opt_options?: olx.AtPixelOptions | undefined) => (import("openlayers").Feature | import("openlayers").render.Feature)[] | null;
                    forEachLayerAtPixel: <T_1>(pixel: import("openlayers").Pixel, callback: (layer: import("openlayers").layer.Layer, color: import("openlayers").Color) => T_1, opt_this?: any, opt_layerFilter?: ((layer: import("openlayers").layer.Layer) => boolean) | undefined, opt_this2?: any) => T_1;
                    hasFeatureAtPixel: (pixel: import("openlayers").Pixel, opt_options?: olx.AtPixelOptions | undefined) => boolean;
                    getEventCoordinate: (event: Event) => import("openlayers").Coordinate;
                    getEventPixel: (event: Event) => import("openlayers").Pixel;
                    getTarget: () => string | Element;
                    getTargetElement: () => Element;
                    getCoordinateFromPixel: (pixel: import("openlayers").Pixel) => import("openlayers").Coordinate;
                    getControls: () => import("openlayers").Collection<import("openlayers").control.Control>;
                    getOverlays: () => import("openlayers").Collection<import("openlayers").Overlay>;
                    getOverlayById: (id: string | number) => import("openlayers").Overlay;
                    getInteractions: () => import("openlayers").Collection<import("openlayers").interaction.Interaction>;
                    getLayerGroup: () => import("openlayers").layer.Group;
                    getLayers: () => import("openlayers").Collection<import("openlayers").layer.Base>;
                    getPixelFromCoordinate: (coordinate: import("openlayers").Coordinate) => import("openlayers").Pixel;
                    getSize: () => import("openlayers").Size;
                    getView: () => import("openlayers").View;
                    getViewport: () => Element;
                    renderSync: () => void;
                    render: () => void;
                    removeControl: (control: import("openlayers").control.Control) => import("openlayers").control.Control;
                    removeInteraction: (interaction: import("openlayers").interaction.Interaction) => import("openlayers").interaction.Interaction;
                    removeLayer: (layer: import("openlayers").layer.Base) => import("openlayers").layer.Base;
                    removeOverlay: (overlay: import("openlayers").Overlay) => import("openlayers").Overlay;
                    setLayerGroup: (layerGroup: import("openlayers").layer.Group) => void;
                    setSize: (size: import("openlayers").Size) => void;
                    setTarget: (target: string | Element) => void;
                    setView: (view: import("openlayers").View) => void;
                    updateSize: () => void;
                    get: (key: string) => any;
                    getKeys: () => string[];
                    getProperties: () => {
                        [k: string]: any;
                    };
                    set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                    setProperties: (values: {
                        [k: string]: any;
                    }, opt_silent?: boolean | undefined) => void;
                    unset: (key: string, opt_silent?: boolean | undefined) => void;
                    changed: () => void;
                    dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                    getRevision: () => number;
                    on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                } | null;
                mapType: import("./store/map/map.model").MapType;
                zoom: number;
                poiLayer: boolean;
                trafficLayer: boolean;
                viewType: import("./store/map/map.model").ViewType;
                scale: number;
                drawerActivation: boolean;
                drawerShowDetails: boolean;
                mobileDrawerShowDetails: boolean;
                overlay: {
                    getElement: () => Element;
                    getId: () => string | number;
                    getMap: () => import("openlayers").Map;
                    getOffset: () => number[];
                    getPosition: () => import("openlayers").Coordinate;
                    getPositioning: () => import("openlayers").OverlayPositioning;
                    setElement: (element: Element) => void;
                    setMap: (map: import("openlayers").Map) => void;
                    setOffset: (offset: number[]) => void;
                    setPosition: (position: import("openlayers").Coordinate | undefined) => void;
                    setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
                    get: (key: string) => any;
                    getKeys: () => string[];
                    getProperties: () => {
                        [k: string]: any;
                    };
                    set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                    setProperties: (values: {
                        [k: string]: any;
                    }, opt_silent?: boolean | undefined) => void;
                    unset: (key: string, opt_silent?: boolean | undefined) => void;
                    changed: () => void;
                    dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                    getRevision: () => number;
                    on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                } | null;
                persistentOverlay: {
                    getElement: () => Element;
                    getId: () => string | number;
                    getMap: () => import("openlayers").Map;
                    getOffset: () => number[];
                    getPosition: () => import("openlayers").Coordinate;
                    getPositioning: () => import("openlayers").OverlayPositioning;
                    setElement: (element: Element) => void;
                    setMap: (map: import("openlayers").Map) => void;
                    setOffset: (offset: number[]) => void;
                    setPosition: (position: import("openlayers").Coordinate | undefined) => void;
                    setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
                    get: (key: string) => any;
                    getKeys: () => string[];
                    getProperties: () => {
                        [k: string]: any;
                    };
                    set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                    setProperties: (values: {
                        [k: string]: any;
                    }, opt_silent?: boolean | undefined) => void;
                    unset: (key: string, opt_silent?: boolean | undefined) => void;
                    changed: () => void;
                    dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                    getRevision: () => number;
                    on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                } | null;
                popupContainer: HTMLDivElement | null;
                persistentContainer: HTMLDivElement | null;
                selectedMarker: {
                    mapCoords: [number, number];
                    iconUrl: string;
                    category: string;
                    location: {
                        x: number;
                        y: number;
                    };
                    neighbourhood: string;
                    region: string;
                    title: string;
                    type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
                    address: string;
                } | {
                    mapCoords: [number, number];
                    city: import("./components/Map.model").NuString;
                    district: import("./components/Map.model").NuString;
                    formatted_address: import("./components/Map.model").NuString;
                    in_odd_even_zone: boolean;
                    in_traffic_zone: boolean;
                    municipality_zone: import("./components/Map.model").NuString;
                    neighbourhood: import("./components/Map.model").NuString;
                    place: import("./components/Map.model").NuString;
                    route_name: import("./components/Map.model").NuString;
                    route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
                    state: import("./components/Map.model").NuString;
                    status: import("./components/Map.model").NuString;
                    village: import("./components/Map.model").NuString;
                } | null;
                mainMarker: {
                    getSource: () => import("openlayers").source.Vector;
                    getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
                    getStyleFunction: () => import("openlayers").StyleFunction | undefined;
                    setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
                    setMap: (map: import("openlayers").Map) => void;
                    setSource: (source: import("openlayers").source.Source) => void;
                    getExtent: () => import("openlayers").Extent;
                    getMaxResolution: () => number;
                    getMinResolution: () => number;
                    getOpacity: () => number;
                    getVisible: () => boolean;
                    getZIndex: () => number;
                    setExtent: (extent: import("openlayers").Extent) => void;
                    setMaxResolution: (maxResolution: number) => void;
                    setMinResolution: (minResolution: number) => void;
                    setOpacity: (opacity: number) => void;
                    setVisible: (visible: boolean) => void;
                    setZIndex: (zindex: number) => void;
                    get: (key: string) => any;
                    getKeys: () => string[];
                    getProperties: () => {
                        [k: string]: any;
                    };
                    set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                    setProperties: (values: {
                        [k: string]: any;
                    }, opt_silent?: boolean | undefined) => void;
                    unset: (key: string, opt_silent?: boolean | undefined) => void;
                    changed: () => void;
                    dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                    getRevision: () => number;
                    on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                } | null;
                mainMarkerCoords: [number, number] | null;
                reverseResult: {
                    mapCoords: [number, number];
                    city: import("./components/Map.model").NuString;
                    district: import("./components/Map.model").NuString;
                    formatted_address: import("./components/Map.model").NuString;
                    in_odd_even_zone: boolean;
                    in_traffic_zone: boolean;
                    municipality_zone: import("./components/Map.model").NuString;
                    neighbourhood: import("./components/Map.model").NuString;
                    place: import("./components/Map.model").NuString;
                    route_name: import("./components/Map.model").NuString;
                    route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
                    state: import("./components/Map.model").NuString;
                    status: import("./components/Map.model").NuString;
                    village: import("./components/Map.model").NuString;
                } | null;
                searchMarkers: {
                    getSource: () => import("openlayers").source.Vector;
                    getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
                    getStyleFunction: () => import("openlayers").StyleFunction | undefined;
                    setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
                    setMap: (map: import("openlayers").Map) => void;
                    setSource: (source: import("openlayers").source.Source) => void;
                    getExtent: () => import("openlayers").Extent;
                    getMaxResolution: () => number;
                    getMinResolution: () => number;
                    getOpacity: () => number;
                    getVisible: () => boolean;
                    getZIndex: () => number;
                    setExtent: (extent: import("openlayers").Extent) => void;
                    setMaxResolution: (maxResolution: number) => void;
                    setMinResolution: (minResolution: number) => void;
                    setOpacity: (opacity: number) => void;
                    setVisible: (visible: boolean) => void;
                    setZIndex: (zindex: number) => void;
                    get: (key: string) => any;
                    getKeys: () => string[];
                    getProperties: () => {
                        [k: string]: any;
                    };
                    set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                    setProperties: (values: {
                        [k: string]: any;
                    }, opt_silent?: boolean | undefined) => void;
                    unset: (key: string, opt_silent?: boolean | undefined) => void;
                    changed: () => void;
                    dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                    getRevision: () => number;
                    on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                    un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
                } | null;
                searchResults: {
                    mapCoords: [number, number];
                    iconUrl: string;
                    category: string;
                    location: {
                        x: number;
                        y: number;
                    };
                    neighbourhood: string;
                    region: string;
                    title: string;
                    type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
                    address: string;
                }[];
                breakpoints: {
                    lt: {
                        xs: boolean;
                        sm: boolean;
                        md: boolean;
                        lg: boolean;
                        xl: boolean;
                    };
                    gt: {
                        xs: boolean;
                        sm: boolean;
                        md: boolean;
                        lg: boolean;
                        xl: boolean;
                    };
                    xs: boolean;
                    sm: boolean;
                    md: boolean;
                    lg: boolean;
                    xl: boolean;
                };
                mapDimensions: {
                    width: string;
                    height: string;
                };
            };
            search: ({ term, coords }: import("./components/Map.model").HandleSearchProps) => Promise<{
                markers: import("openlayers").layer.Vector;
                data: import("./store/markers/markers.model").SearchResult;
            } | undefined>;
            reverse: (args_0: import("openlayers").Coordinate, args_1?: import("./store/markers/markers.model").ReverseOnPointOptions | undefined) => Promise<{
                marker: import("openlayers").layer.Vector | undefined;
                coords: import("openlayers").Coordinate;
                data: import("./store/markers/markers.model").PrimaryReverseResult;
            } | {
                marker?: undefined;
                coords?: undefined;
                data?: undefined;
            }>;
        }> & {} & import("vue").ComponentCustomProperties & {};
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        mapKey: {
            type: StringConstructor;
            required: true;
        };
        serviceKey: {
            type: StringConstructor;
            default: string;
        };
        reverseUrl: StringConstructor;
        searchUrl: StringConstructor;
        center: {
            type: import("vue").PropType<import("./components/Map.model").CoordsObj>;
            default: null;
        };
        zoom: {
            type: NumberConstructor;
            default: number;
        };
        poi: {
            type: BooleanConstructor;
            default: boolean;
        };
        traffic: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultType: {
            type: import("vue").PropType<import("./store/map/map.model").MapType>;
            default: string;
        };
        mapTypes: {
            type: import("vue").PropType<import("./store/map/map.model").MapType[]>;
            default: import("./store/map/map.model").MapType[];
        };
        desktopLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
        mobileLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
        desktopLayersStyle: ObjectConstructor;
        mobileLayersStyle: ObjectConstructor;
        temporaryPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
        persistentPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
        temporaryPopupContainerStyle: ObjectConstructor;
        persistentPopupContainerStyle: ObjectConstructor;
        hideLayers: BooleanConstructor;
        hideSearchContainer: BooleanConstructor;
        markersIconCallback: import("vue").PropType<import("./components/Map.model").MarkersIconCallback>;
        markerHoverCallback: import("vue").PropType<import("./components/Map.model").MarkerHoverCallback>;
        popupOnMarkerHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        popupOnResultHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        zoomOnMarkerClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        zoomOnResultClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        cluster: {
            type: BooleanConstructor;
            default: boolean;
        };
        clusterThreshold: {
            type: NumberConstructor;
            default: number;
        };
        reverseOnClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        scale: {
            type: NumberConstructor;
            default: number;
        };
        viewType: import("vue").PropType<import("./store/map/map.model").ViewType>;
    }>> & {
        "onOn-click"?: ((...args: any[]) => any) | undefined;
        "onOn-zoom"?: ((...args: any[]) => any) | undefined;
        "onOn-result-hover"?: ((...args: any[]) => any) | undefined;
        "onOn-result-click"?: ((...args: any[]) => any) | undefined;
    }, {
        state: {
            api: {
                REVERSE: (lng: number, lat: number) => Promise<import("./store/markers/markers.model").PrimaryReverseResult>;
                SEARCH: (term: string, coords: import("openlayers").Coordinate) => Promise<import("./store/markers/markers.model").SearchResult>;
            } | null;
            searchLoading: boolean;
            reverseLoading: boolean;
            mapContainer: HTMLDivElement | null;
            map: {
                setMapType: (value: import("./store/map/map.model").MapType) => void;
                switchPoiLayer: (value: boolean) => void;
                switchTrafficLayer: (value: boolean) => void;
                addControl: (control: import("openlayers").control.Control) => void;
                addInteraction: (interaction: import("openlayers").interaction.Interaction) => void;
                addLayer: (layer: import("openlayers").layer.Base) => void;
                addOverlay: (overlay: import("openlayers").Overlay) => void;
                forEachFeatureAtPixel: <T>(pixel: import("openlayers").Pixel, callback: (feature: import("openlayers").Feature | import("openlayers").render.Feature, layer: import("openlayers").layer.Layer) => T, opt_options?: olx.AtPixelOptions | undefined) => T;
                getFeaturesAtPixel: (pixel: import("openlayers").Pixel, opt_options?: olx.AtPixelOptions | undefined) => (import("openlayers").Feature | import("openlayers").render.Feature)[] | null;
                forEachLayerAtPixel: <T_1>(pixel: import("openlayers").Pixel, callback: (layer: import("openlayers").layer.Layer, color: import("openlayers").Color) => T_1, opt_this?: any, opt_layerFilter?: ((layer: import("openlayers").layer.Layer) => boolean) | undefined, opt_this2?: any) => T_1;
                hasFeatureAtPixel: (pixel: import("openlayers").Pixel, opt_options?: olx.AtPixelOptions | undefined) => boolean;
                getEventCoordinate: (event: Event) => import("openlayers").Coordinate;
                getEventPixel: (event: Event) => import("openlayers").Pixel;
                getTarget: () => string | Element;
                getTargetElement: () => Element;
                getCoordinateFromPixel: (pixel: import("openlayers").Pixel) => import("openlayers").Coordinate;
                getControls: () => import("openlayers").Collection<import("openlayers").control.Control>;
                getOverlays: () => import("openlayers").Collection<import("openlayers").Overlay>;
                getOverlayById: (id: string | number) => import("openlayers").Overlay;
                getInteractions: () => import("openlayers").Collection<import("openlayers").interaction.Interaction>;
                getLayerGroup: () => import("openlayers").layer.Group;
                getLayers: () => import("openlayers").Collection<import("openlayers").layer.Base>;
                getPixelFromCoordinate: (coordinate: import("openlayers").Coordinate) => import("openlayers").Pixel;
                getSize: () => import("openlayers").Size;
                getView: () => import("openlayers").View;
                getViewport: () => Element;
                renderSync: () => void;
                render: () => void;
                removeControl: (control: import("openlayers").control.Control) => import("openlayers").control.Control;
                removeInteraction: (interaction: import("openlayers").interaction.Interaction) => import("openlayers").interaction.Interaction;
                removeLayer: (layer: import("openlayers").layer.Base) => import("openlayers").layer.Base;
                removeOverlay: (overlay: import("openlayers").Overlay) => import("openlayers").Overlay;
                setLayerGroup: (layerGroup: import("openlayers").layer.Group) => void;
                setSize: (size: import("openlayers").Size) => void;
                setTarget: (target: string | Element) => void;
                setView: (view: import("openlayers").View) => void;
                updateSize: () => void;
                get: (key: string) => any;
                getKeys: () => string[];
                getProperties: () => {
                    [k: string]: any;
                };
                set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                setProperties: (values: {
                    [k: string]: any;
                }, opt_silent?: boolean | undefined) => void;
                unset: (key: string, opt_silent?: boolean | undefined) => void;
                changed: () => void;
                dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                getRevision: () => number;
                on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
            } | null;
            mapType: import("./store/map/map.model").MapType;
            zoom: number;
            poiLayer: boolean;
            trafficLayer: boolean;
            viewType: import("./store/map/map.model").ViewType;
            scale: number;
            drawerActivation: boolean;
            drawerShowDetails: boolean;
            mobileDrawerShowDetails: boolean;
            overlay: {
                getElement: () => Element;
                getId: () => string | number;
                getMap: () => import("openlayers").Map;
                getOffset: () => number[];
                getPosition: () => import("openlayers").Coordinate;
                getPositioning: () => import("openlayers").OverlayPositioning;
                setElement: (element: Element) => void;
                setMap: (map: import("openlayers").Map) => void;
                setOffset: (offset: number[]) => void;
                setPosition: (position: import("openlayers").Coordinate | undefined) => void;
                setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
                get: (key: string) => any;
                getKeys: () => string[];
                getProperties: () => {
                    [k: string]: any;
                };
                set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                setProperties: (values: {
                    [k: string]: any;
                }, opt_silent?: boolean | undefined) => void;
                unset: (key: string, opt_silent?: boolean | undefined) => void;
                changed: () => void;
                dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                getRevision: () => number;
                on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
            } | null;
            persistentOverlay: {
                getElement: () => Element;
                getId: () => string | number;
                getMap: () => import("openlayers").Map;
                getOffset: () => number[];
                getPosition: () => import("openlayers").Coordinate;
                getPositioning: () => import("openlayers").OverlayPositioning;
                setElement: (element: Element) => void;
                setMap: (map: import("openlayers").Map) => void;
                setOffset: (offset: number[]) => void;
                setPosition: (position: import("openlayers").Coordinate | undefined) => void;
                setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
                get: (key: string) => any;
                getKeys: () => string[];
                getProperties: () => {
                    [k: string]: any;
                };
                set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                setProperties: (values: {
                    [k: string]: any;
                }, opt_silent?: boolean | undefined) => void;
                unset: (key: string, opt_silent?: boolean | undefined) => void;
                changed: () => void;
                dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                getRevision: () => number;
                on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
            } | null;
            popupContainer: HTMLDivElement | null;
            persistentContainer: HTMLDivElement | null;
            selectedMarker: {
                mapCoords: [number, number];
                iconUrl: string;
                category: string;
                location: {
                    x: number;
                    y: number;
                };
                neighbourhood: string;
                region: string;
                title: string;
                type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
                address: string;
            } | {
                mapCoords: [number, number];
                city: import("./components/Map.model").NuString;
                district: import("./components/Map.model").NuString;
                formatted_address: import("./components/Map.model").NuString;
                in_odd_even_zone: boolean;
                in_traffic_zone: boolean;
                municipality_zone: import("./components/Map.model").NuString;
                neighbourhood: import("./components/Map.model").NuString;
                place: import("./components/Map.model").NuString;
                route_name: import("./components/Map.model").NuString;
                route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
                state: import("./components/Map.model").NuString;
                status: import("./components/Map.model").NuString;
                village: import("./components/Map.model").NuString;
            } | null;
            mainMarker: {
                getSource: () => import("openlayers").source.Vector;
                getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
                getStyleFunction: () => import("openlayers").StyleFunction | undefined;
                setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
                setMap: (map: import("openlayers").Map) => void;
                setSource: (source: import("openlayers").source.Source) => void;
                getExtent: () => import("openlayers").Extent;
                getMaxResolution: () => number;
                getMinResolution: () => number;
                getOpacity: () => number;
                getVisible: () => boolean;
                getZIndex: () => number;
                setExtent: (extent: import("openlayers").Extent) => void;
                setMaxResolution: (maxResolution: number) => void;
                setMinResolution: (minResolution: number) => void;
                setOpacity: (opacity: number) => void;
                setVisible: (visible: boolean) => void;
                setZIndex: (zindex: number) => void;
                get: (key: string) => any;
                getKeys: () => string[];
                getProperties: () => {
                    [k: string]: any;
                };
                set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                setProperties: (values: {
                    [k: string]: any;
                }, opt_silent?: boolean | undefined) => void;
                unset: (key: string, opt_silent?: boolean | undefined) => void;
                changed: () => void;
                dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                getRevision: () => number;
                on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
            } | null;
            mainMarkerCoords: [number, number] | null;
            reverseResult: {
                mapCoords: [number, number];
                city: import("./components/Map.model").NuString;
                district: import("./components/Map.model").NuString;
                formatted_address: import("./components/Map.model").NuString;
                in_odd_even_zone: boolean;
                in_traffic_zone: boolean;
                municipality_zone: import("./components/Map.model").NuString;
                neighbourhood: import("./components/Map.model").NuString;
                place: import("./components/Map.model").NuString;
                route_name: import("./components/Map.model").NuString;
                route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
                state: import("./components/Map.model").NuString;
                status: import("./components/Map.model").NuString;
                village: import("./components/Map.model").NuString;
            } | null;
            searchMarkers: {
                getSource: () => import("openlayers").source.Vector;
                getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
                getStyleFunction: () => import("openlayers").StyleFunction | undefined;
                setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
                setMap: (map: import("openlayers").Map) => void;
                setSource: (source: import("openlayers").source.Source) => void;
                getExtent: () => import("openlayers").Extent;
                getMaxResolution: () => number;
                getMinResolution: () => number;
                getOpacity: () => number;
                getVisible: () => boolean;
                getZIndex: () => number;
                setExtent: (extent: import("openlayers").Extent) => void;
                setMaxResolution: (maxResolution: number) => void;
                setMinResolution: (minResolution: number) => void;
                setOpacity: (opacity: number) => void;
                setVisible: (visible: boolean) => void;
                setZIndex: (zindex: number) => void;
                get: (key: string) => any;
                getKeys: () => string[];
                getProperties: () => {
                    [k: string]: any;
                };
                set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
                setProperties: (values: {
                    [k: string]: any;
                }, opt_silent?: boolean | undefined) => void;
                unset: (key: string, opt_silent?: boolean | undefined) => void;
                changed: () => void;
                dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
                getRevision: () => number;
                on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
                un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
            } | null;
            searchResults: {
                mapCoords: [number, number];
                iconUrl: string;
                category: string;
                location: {
                    x: number;
                    y: number;
                };
                neighbourhood: string;
                region: string;
                title: string;
                type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
                address: string;
            }[];
            breakpoints: {
                lt: {
                    xs: boolean;
                    sm: boolean;
                    md: boolean;
                    lg: boolean;
                    xl: boolean;
                };
                gt: {
                    xs: boolean;
                    sm: boolean;
                    md: boolean;
                    lg: boolean;
                    xl: boolean;
                };
                xs: boolean;
                sm: boolean;
                md: boolean;
                lg: boolean;
                xl: boolean;
            };
            mapDimensions: {
                width: string;
                height: string;
            };
        };
        search: ({ term, coords }: import("./components/Map.model").HandleSearchProps) => Promise<{
            markers: import("openlayers").layer.Vector;
            data: import("./store/markers/markers.model").SearchResult;
        } | undefined>;
        reverse: (args_0: import("openlayers").Coordinate, args_1?: import("./store/markers/markers.model").ReverseOnPointOptions | undefined) => Promise<{
            marker: import("openlayers").layer.Vector | undefined;
            coords: import("openlayers").Coordinate;
            data: import("./store/markers/markers.model").PrimaryReverseResult;
        } | {
            marker?: undefined;
            coords?: undefined;
            data?: undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("on-click" | "on-zoom" | "on-result-hover" | "on-result-click")[], "on-click" | "on-zoom" | "on-result-hover" | "on-result-click", {
        zoom: number;
        scale: number;
        cluster: boolean;
        clusterThreshold: number;
        zoomOnMarkerClick: boolean;
        zoomOnResultClick: boolean;
        popupOnMarkerHover: boolean;
        popupOnResultHover: boolean;
        reverseOnClick: boolean;
        serviceKey: string;
        center: import("./components/Map.model").CoordsObj;
        poi: boolean;
        traffic: boolean;
        defaultType: import("./store/map/map.model").MapType;
        mapTypes: import("./store/map/map.model").MapType[];
        hideLayers: boolean;
        hideSearchContainer: boolean;
    }, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            layers: (_: {
                tiles: {
                    title: import("./store/map/map.model").MapType;
                    url: string;
                }[];
                mapType: import("./store/map/map.model").MapType;
                poi: boolean;
                traffic: boolean;
            }) => any;
            'search-container': (_: {}) => any;
        };
    });
};
export {};
