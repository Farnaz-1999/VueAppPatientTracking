import { PropType } from "vue";
import { CoordsObj, MarkersIconCallback, MarkerHoverCallback, HandleSearchProps } from "./Map.model";
import { MapType, ViewType } from "../store/map/map.model";
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    /**
     * کلید نقشه، گرفته شده از پلتفرم نشان
     */
    mapKey: {
        type: StringConstructor;
        required: true;
    };
    /**
     * کلید سرویس‌ها برای تبدیل نقطه به آدرس (Reverse) و جستجو (search)
     */
    serviceKey: {
        type: StringConstructor;
        default: string;
    };
    reverseUrl: StringConstructor;
    searchUrl: StringConstructor;
    /**
     * مرکز نقشه در هنگام شروع
     */
    center: {
        type: PropType<CoordsObj>;
        default: null;
    };
    /**
     * میزان زوم نقشه در هنگام شروع
     */
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * نمایش یا عدم نمایش نقاط
     */
    poi: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * نمایش یا عدم نمایش خطوط ترافیک
     */
    traffic: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * نوع نقشه در هنگام شروع
     * <br>
     * neshan
    | dreamy
    | dreamy-gold
    | standard-night
    | standard-day
    | osm-bright
     */
    defaultType: {
        type: PropType<MapType>;
        default: string;
    };
    /**
     * آرایه‌ای از انواع نقشه‌هایی که می‌خواهید در لایه‌ها نمایش داده شود.
     */
    mapTypes: {
        type: PropType<MapType[]>;
        default: MapType[];
    };
    /**
     * تغییر کلاس بخش لایه‌ها برای حالت دستکتاپ
     */
    desktopLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر کلاس بخش لایه‌ها برای حالت موبایل
     */
    mobileLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر استایل بخش لایه‌ها برای حالت دستکتاپ
     */
    desktopLayersStyle: ObjectConstructor;
    /**
     * تغییر استایل بخش لایه‌ها برای حالت موبایل
     */
    mobileLayersStyle: ObjectConstructor;
    /**
     * تغییر کلاس پاپ آپ موقت (هنگامی که کاربر با موس هاور می‌کند)
     */
    temporaryPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر کلاس پاپ آپ دائم (هنگامی که کاربر کلیک می‌کند)
     */
    persistentPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر استایل پاپ آپ موقت (هنگامی که کاربر با موس هاور می‌کند)
     */
    temporaryPopupContainerStyle: ObjectConstructor;
    /**
     * تغییر استایل پاپ آپ دائم (هنگامی که کاربر کلیک می‌کند)
     */
    persistentPopupContainerStyle: ObjectConstructor;
    /**
     * عدم نمایش لایه‌ها
     */
    hideLayers: BooleanConstructor;
    /**
     * عدم نمایش بخش سرج و نتایج
     */
    hideSearchContainer: BooleanConstructor;
    markersIconCallback: PropType<MarkersIconCallback>;
    markerHoverCallback: PropType<MarkerHoverCallback>;
    popupOnMarkerHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupOnResultHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomOnMarkerClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomOnResultClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    cluster: {
        type: BooleanConstructor;
        default: boolean;
    };
    clusterThreshold: {
        type: NumberConstructor;
        default: number;
    };
    reverseOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    scale: {
        type: NumberConstructor;
        default: number;
    };
    viewType: PropType<ViewType>;
}, {
    state: {
        api: {
            REVERSE: (lng: number, lat: number) => Promise<import("../store/markers/markers.model").PrimaryReverseResult>;
            SEARCH: (term: string, coords: import("openlayers").Coordinate) => Promise<import("../store/markers/markers.model").SearchResult>;
        } | null;
        searchLoading: boolean;
        reverseLoading: boolean;
        mapContainer: HTMLDivElement | null;
        map: {
            setMapType: (value: MapType) => void;
            switchPoiLayer: (value: boolean) => void;
            switchTrafficLayer: (value: boolean) => void;
            addControl: (control: import("openlayers").control.Control) => void;
            addInteraction: (interaction: import("openlayers").interaction.Interaction) => void;
            addLayer: (layer: import("openlayers").layer.Base) => void;
            addOverlay: (overlay: import("openlayers").Overlay) => void;
            forEachFeatureAtPixel: <T>(pixel: import("openlayers").Pixel, callback: (feature: import("openlayers").Feature | import("openlayers").render.Feature, layer: import("openlayers").layer.Layer) => T, opt_options?: import("openlayers").olx.AtPixelOptions | undefined) => T;
            getFeaturesAtPixel: (pixel: import("openlayers").Pixel, opt_options?: import("openlayers").olx.AtPixelOptions | undefined) => (import("openlayers").Feature | import("openlayers").render.Feature)[] | null;
            forEachLayerAtPixel: <T_1>(pixel: import("openlayers").Pixel, callback: (layer: import("openlayers").layer.Layer, color: import("openlayers").Color) => T_1, opt_this?: any, opt_layerFilter?: ((layer: import("openlayers").layer.Layer) => boolean) | undefined, opt_this2?: any) => T_1;
            hasFeatureAtPixel: (pixel: import("openlayers").Pixel, opt_options?: import("openlayers").olx.AtPixelOptions | undefined) => boolean;
            getEventCoordinate: (event: Event) => import("openlayers").Coordinate;
            getEventPixel: (event: Event) => import("openlayers").Pixel;
            getTarget: () => string | Element;
            getTargetElement: () => Element;
            getCoordinateFromPixel: (pixel: import("openlayers").Pixel) => import("openlayers").Coordinate;
            getControls: () => import("openlayers").Collection<import("openlayers").control.Control>;
            getOverlays: () => import("openlayers").Collection<import("openlayers").Overlay>;
            getOverlayById: (id: string | number) => import("openlayers").Overlay;
            getInteractions: () => import("openlayers").Collection<import("openlayers").interaction.Interaction>;
            getLayerGroup: () => import("openlayers").layer.Group;
            getLayers: () => import("openlayers").Collection<import("openlayers").layer.Base>;
            getPixelFromCoordinate: (coordinate: import("openlayers").Coordinate) => import("openlayers").Pixel;
            getSize: () => import("openlayers").Size;
            getView: () => import("openlayers").View;
            getViewport: () => Element;
            renderSync: () => void;
            render: () => void;
            removeControl: (control: import("openlayers").control.Control) => import("openlayers").control.Control;
            removeInteraction: (interaction: import("openlayers").interaction.Interaction) => import("openlayers").interaction.Interaction;
            removeLayer: (layer: import("openlayers").layer.Base) => import("openlayers").layer.Base;
            removeOverlay: (overlay: import("openlayers").Overlay) => import("openlayers").Overlay;
            setLayerGroup: (layerGroup: import("openlayers").layer.Group) => void;
            setSize: (size: import("openlayers").Size) => void;
            setTarget: (target: string | Element) => void;
            setView: (view: import("openlayers").View) => void;
            updateSize: () => void;
            get: (key: string) => any;
            getKeys: () => string[];
            getProperties: () => {
                [k: string]: any;
            };
            set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
            setProperties: (values: {
                [k: string]: any;
            }, opt_silent?: boolean | undefined) => void;
            unset: (key: string, opt_silent?: boolean | undefined) => void;
            changed: () => void;
            dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
            getRevision: () => number;
            on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
        } | null;
        mapType: MapType;
        zoom: number;
        poiLayer: boolean;
        trafficLayer: boolean;
        viewType: ViewType;
        scale: number;
        drawerActivation: boolean;
        drawerShowDetails: boolean;
        mobileDrawerShowDetails: boolean;
        overlay: {
            getElement: () => Element;
            getId: () => string | number;
            getMap: () => import("openlayers").Map;
            getOffset: () => number[];
            getPosition: () => import("openlayers").Coordinate;
            getPositioning: () => import("openlayers").OverlayPositioning;
            setElement: (element: Element) => void;
            setMap: (map: import("openlayers").Map) => void;
            setOffset: (offset: number[]) => void;
            setPosition: (position: import("openlayers").Coordinate | undefined) => void;
            setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
            get: (key: string) => any;
            getKeys: () => string[];
            getProperties: () => {
                [k: string]: any;
            };
            set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
            setProperties: (values: {
                [k: string]: any;
            }, opt_silent?: boolean | undefined) => void;
            unset: (key: string, opt_silent?: boolean | undefined) => void;
            changed: () => void;
            dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
            getRevision: () => number;
            on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
        } | null;
        persistentOverlay: {
            getElement: () => Element;
            getId: () => string | number;
            getMap: () => import("openlayers").Map;
            getOffset: () => number[];
            getPosition: () => import("openlayers").Coordinate;
            getPositioning: () => import("openlayers").OverlayPositioning;
            setElement: (element: Element) => void;
            setMap: (map: import("openlayers").Map) => void;
            setOffset: (offset: number[]) => void;
            setPosition: (position: import("openlayers").Coordinate | undefined) => void;
            setPositioning: (positioning: import("openlayers").OverlayPositioning) => void;
            get: (key: string) => any;
            getKeys: () => string[];
            getProperties: () => {
                [k: string]: any;
            };
            set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
            setProperties: (values: {
                [k: string]: any;
            }, opt_silent?: boolean | undefined) => void;
            unset: (key: string, opt_silent?: boolean | undefined) => void;
            changed: () => void;
            dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
            getRevision: () => number;
            on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
        } | null;
        popupContainer: HTMLDivElement | null;
        persistentContainer: HTMLDivElement | null;
        selectedMarker: {
            mapCoords: [number, number];
            iconUrl: string;
            category: string;
            location: {
                x: number;
                y: number;
            };
            neighbourhood: string;
            region: string;
            title: string;
            type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
            address: string;
        } | {
            mapCoords: [number, number];
            city: import("./Map.model").NuString;
            district: import("./Map.model").NuString;
            formatted_address: import("./Map.model").NuString;
            in_odd_even_zone: boolean;
            in_traffic_zone: boolean;
            municipality_zone: import("./Map.model").NuString;
            neighbourhood: import("./Map.model").NuString;
            place: import("./Map.model").NuString;
            route_name: import("./Map.model").NuString;
            route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
            state: import("./Map.model").NuString;
            status: import("./Map.model").NuString;
            village: import("./Map.model").NuString;
        } | null;
        mainMarker: {
            getSource: () => import("openlayers").source.Vector;
            getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
            getStyleFunction: () => import("openlayers").StyleFunction | undefined;
            setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
            setMap: (map: import("openlayers").Map) => void;
            setSource: (source: import("openlayers").source.Source) => void;
            getExtent: () => import("openlayers").Extent;
            getMaxResolution: () => number;
            getMinResolution: () => number;
            getOpacity: () => number;
            getVisible: () => boolean;
            getZIndex: () => number;
            setExtent: (extent: import("openlayers").Extent) => void;
            setMaxResolution: (maxResolution: number) => void;
            setMinResolution: (minResolution: number) => void;
            setOpacity: (opacity: number) => void;
            setVisible: (visible: boolean) => void;
            setZIndex: (zindex: number) => void;
            get: (key: string) => any;
            getKeys: () => string[];
            getProperties: () => {
                [k: string]: any;
            };
            set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
            setProperties: (values: {
                [k: string]: any;
            }, opt_silent?: boolean | undefined) => void;
            unset: (key: string, opt_silent?: boolean | undefined) => void;
            changed: () => void;
            dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
            getRevision: () => number;
            on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
        } | null;
        mainMarkerCoords: [number, number] | null;
        reverseResult: {
            mapCoords: [number, number];
            city: import("./Map.model").NuString;
            district: import("./Map.model").NuString;
            formatted_address: import("./Map.model").NuString;
            in_odd_even_zone: boolean;
            in_traffic_zone: boolean;
            municipality_zone: import("./Map.model").NuString;
            neighbourhood: import("./Map.model").NuString;
            place: import("./Map.model").NuString;
            route_name: import("./Map.model").NuString;
            route_type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back" | null;
            state: import("./Map.model").NuString;
            status: import("./Map.model").NuString;
            village: import("./Map.model").NuString;
        } | null;
        searchMarkers: {
            getSource: () => import("openlayers").source.Vector;
            getStyle: () => import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[];
            getStyleFunction: () => import("openlayers").StyleFunction | undefined;
            setStyle: (style: import("openlayers").style.Style | import("openlayers").StyleFunction | import("openlayers").style.Style[] | null | undefined) => void;
            setMap: (map: import("openlayers").Map) => void;
            setSource: (source: import("openlayers").source.Source) => void;
            getExtent: () => import("openlayers").Extent;
            getMaxResolution: () => number;
            getMinResolution: () => number;
            getOpacity: () => number;
            getVisible: () => boolean;
            getZIndex: () => number;
            setExtent: (extent: import("openlayers").Extent) => void;
            setMaxResolution: (maxResolution: number) => void;
            setMinResolution: (minResolution: number) => void;
            setOpacity: (opacity: number) => void;
            setVisible: (visible: boolean) => void;
            setZIndex: (zindex: number) => void;
            get: (key: string) => any;
            getKeys: () => string[];
            getProperties: () => {
                [k: string]: any;
            };
            set: (key: string, value: any, opt_silent?: boolean | undefined) => void;
            setProperties: (values: {
                [k: string]: any;
            }, opt_silent?: boolean | undefined) => void;
            unset: (key: string, opt_silent?: boolean | undefined) => void;
            changed: () => void;
            dispatchEvent: (event: string | import("openlayers").events.Event | import("openlayers").GlobalObject) => void;
            getRevision: () => number;
            on: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            once: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => import("openlayers").GlobalObject | import("openlayers").GlobalObject[];
            un: (type: string | string[], listener: import("openlayers").EventsListenerFunctionType, opt_this?: import("openlayers").GlobalObject | undefined) => void;
        } | null;
        searchResults: {
            mapCoords: [number, number];
            iconUrl: string;
            category: string;
            location: {
                x: number;
                y: number;
            };
            neighbourhood: string;
            region: string;
            title: string;
            type: "close" | "magnet" | "neighborhood_landmark" | "formal_school" | "university" | "primary" | "secondary" | "tertiary" | "vaccine" | "subway_station" | "metro_entrance" | "footway" | "department_store" | "internet_cafe" | "park" | "hotel" | "local_government_office" | "marker" | "city" | "residential" | "back";
            address: string;
        }[];
        breakpoints: {
            lt: {
                xs: boolean;
                sm: boolean;
                md: boolean;
                lg: boolean;
                xl: boolean;
            };
            gt: {
                xs: boolean;
                sm: boolean;
                md: boolean;
                lg: boolean;
                xl: boolean;
            };
            xs: boolean;
            sm: boolean;
            md: boolean;
            lg: boolean;
            xl: boolean;
        };
        mapDimensions: {
            width: string;
            height: string;
        };
    };
    search: ({ term, coords }: HandleSearchProps) => Promise<{
        markers: import("openlayers").layer.Vector;
        data: import("../store/markers/markers.model").SearchResult;
    } | undefined>;
    reverse: (args_0: import("openlayers").Coordinate, args_1?: import("../store/markers/markers.model").ReverseOnPointOptions | undefined) => Promise<{
        marker: import("openlayers").layer.Vector | undefined;
        coords: import("openlayers").Coordinate;
        data: import("../store/markers/markers.model").PrimaryReverseResult;
    } | {
        marker?: undefined;
        coords?: undefined;
        data?: undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("on-click" | "on-zoom" | "on-result-hover" | "on-result-click")[], "on-click" | "on-zoom" | "on-result-hover" | "on-result-click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * کلید نقشه، گرفته شده از پلتفرم نشان
     */
    mapKey: {
        type: StringConstructor;
        required: true;
    };
    /**
     * کلید سرویس‌ها برای تبدیل نقطه به آدرس (Reverse) و جستجو (search)
     */
    serviceKey: {
        type: StringConstructor;
        default: string;
    };
    reverseUrl: StringConstructor;
    searchUrl: StringConstructor;
    /**
     * مرکز نقشه در هنگام شروع
     */
    center: {
        type: PropType<CoordsObj>;
        default: null;
    };
    /**
     * میزان زوم نقشه در هنگام شروع
     */
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * نمایش یا عدم نمایش نقاط
     */
    poi: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * نمایش یا عدم نمایش خطوط ترافیک
     */
    traffic: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * نوع نقشه در هنگام شروع
     * <br>
     * neshan
    | dreamy
    | dreamy-gold
    | standard-night
    | standard-day
    | osm-bright
     */
    defaultType: {
        type: PropType<MapType>;
        default: string;
    };
    /**
     * آرایه‌ای از انواع نقشه‌هایی که می‌خواهید در لایه‌ها نمایش داده شود.
     */
    mapTypes: {
        type: PropType<MapType[]>;
        default: MapType[];
    };
    /**
     * تغییر کلاس بخش لایه‌ها برای حالت دستکتاپ
     */
    desktopLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر کلاس بخش لایه‌ها برای حالت موبایل
     */
    mobileLayersClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر استایل بخش لایه‌ها برای حالت دستکتاپ
     */
    desktopLayersStyle: ObjectConstructor;
    /**
     * تغییر استایل بخش لایه‌ها برای حالت موبایل
     */
    mobileLayersStyle: ObjectConstructor;
    /**
     * تغییر کلاس پاپ آپ موقت (هنگامی که کاربر با موس هاور می‌کند)
     */
    temporaryPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر کلاس پاپ آپ دائم (هنگامی که کاربر کلیک می‌کند)
     */
    persistentPopupContainerClass: (ObjectConstructor | ArrayConstructor | StringConstructor)[];
    /**
     * تغییر استایل پاپ آپ موقت (هنگامی که کاربر با موس هاور می‌کند)
     */
    temporaryPopupContainerStyle: ObjectConstructor;
    /**
     * تغییر استایل پاپ آپ دائم (هنگامی که کاربر کلیک می‌کند)
     */
    persistentPopupContainerStyle: ObjectConstructor;
    /**
     * عدم نمایش لایه‌ها
     */
    hideLayers: BooleanConstructor;
    /**
     * عدم نمایش بخش سرج و نتایج
     */
    hideSearchContainer: BooleanConstructor;
    markersIconCallback: PropType<MarkersIconCallback>;
    markerHoverCallback: PropType<MarkerHoverCallback>;
    popupOnMarkerHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupOnResultHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomOnMarkerClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomOnResultClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    cluster: {
        type: BooleanConstructor;
        default: boolean;
    };
    clusterThreshold: {
        type: NumberConstructor;
        default: number;
    };
    reverseOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    scale: {
        type: NumberConstructor;
        default: number;
    };
    viewType: PropType<ViewType>;
}>> & {
    "onOn-click"?: ((...args: any[]) => any) | undefined;
    "onOn-zoom"?: ((...args: any[]) => any) | undefined;
    "onOn-result-hover"?: ((...args: any[]) => any) | undefined;
    "onOn-result-click"?: ((...args: any[]) => any) | undefined;
}, {
    zoom: number;
    scale: number;
    cluster: boolean;
    clusterThreshold: number;
    zoomOnMarkerClick: boolean;
    zoomOnResultClick: boolean;
    popupOnMarkerHover: boolean;
    popupOnResultHover: boolean;
    reverseOnClick: boolean;
    serviceKey: string;
    center: CoordsObj;
    poi: boolean;
    traffic: boolean;
    defaultType: MapType;
    mapTypes: MapType[];
    hideLayers: boolean;
    hideSearchContainer: boolean;
}>, {
    layers: (_: {
        tiles: {
            title: MapType;
            url: string;
        }[];
        mapType: MapType;
        poi: boolean;
        traffic: boolean;
    }) => any;
    'search-container': (_: {}) => any;
}>;
export default _default;
declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
